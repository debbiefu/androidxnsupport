apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

artifactoryPublish.dependsOn('build')

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from(android.sourceSets.main.java.sourceFiles, android.sourceSets.main.kotlin.sourceFiles)
}

artifacts {
    archives androidSourcesJar
}

publishing {
    publications {
        release(MavenPublication) {
            groupId POM_GROUP
            version POM_VERSION_NAME + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")
            artifactId POM_ARTIFACT_ID
            artifact "$buildDir/outputs/aar/" + POM_NAME + "-release.aar"
            artifact androidSourcesJar

            pom.withXml {
                asNode().appendNode('description', POM_DESCRIPTION + ' Git commit:' + getGitSha())
                final depsNode = asNode().appendNode('dependencies')
                configurations.api.getAllDependencies().each { dep -> addPomDependency(depsNode, dep, "api") }
                configurations.implementation.getAllDependencies().each { dep -> addPomDependency(depsNode, dep, "implementation") }

                // implementation dep 包含 api dep
                (configurations.implementation.getAllDependencies()
                        - configurations.api.getAllDependencies()
                        - configurations.implementation.getAllDependencies()).each {
                    dep -> addPomDependency(depsNode, dep, "runtime")
                }
                if (depsNode.children().size() == 0) {
                    asNode().remove(depsNode)
                }
            }
        }
    }

    repositories {
        repositories {
            maven {
                name = 'myrepo'
                url = "${rootDir}/repo"
            }
        }
    }
}

artifactory {
    contextUrl = "https://artifactory.gz.cvte.cn/artifactory"
    publish {
        repository {
            repoKey = Boolean.valueOf(System.getProperty("snapshot")) ? "SR_maven_snapshots_local" : "SR_maven_releases_local"
            username = System.getProperty("username")
            password = System.getProperty("password")
        }
        defaults {
            publications('release')
        }
    }
}

ext {
    executeShell = { cmd ->
        def result = cmd.execute()
        result.waitFor()
        if (result.exitValue() != 0) {
            return ''
        }
        return result.text.trim()
    }

    getGitSha = {
        return executeShell('git rev-parse --short HEAD')
    }

    addPomDependency = { Node dependenciesNode, Dependency dep, String scope ->
        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
            return
        }
        final dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dep.group)
        dependencyNode.appendNode('artifactId', dep.name)
        dependencyNode.appendNode('version', dep.version)
        dependencyNode.appendNode('scope', scope)
        if (!dep.transitive) {
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            exclusionNode.appendNode('groupId', '*')
            exclusionNode.appendNode('artifactId', '*')
        } else if (!dep.properties.excludeRules.empty) {
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            dep.properties.excludeRules.each { ExcludeRule rule ->
                exclusionNode.appendNode('groupId', rule.group ?: '*')
                exclusionNode.appendNode('artifactId', rule.module ?: '*')
            }
        }
    }
}